name: Create OCI With Terraform
on:
  workflow_dispatch:

jobs: 
  OCI-IaC-Deployment:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: Terraform
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      
      - name: 'Write Config & Key Files'
        run: |
          mkdir -p ~/.oci
          cat <<EOF > /home/runner/.oci/config
          [DEFAULT]
          user=${{secrets.OCI_USER_OCID}}
          fingerprint=${{secrets.OCI_FINGERPRINT}}
          region=${{secrets.OCI_REGION}}
          tenancy=${{secrets.OCI_TENANCY_OCID}}
          key_file=/home/runner/.oci/key.pem
          EOF
          echo "${{secrets.OCI_KEY_FILE}}" > /home/runner/.oci/key.pem
          chmod 600 /home/runner/.oci/key.pem
      
      - name: 'Debug OCI Config and Key'
        run: |
          ls -l /home/runner/.oci/
          cat /home/runner/.oci/config
          stat /home/runner/.oci/key.pem
          head -n 1 /home/runner/.oci/key.pem
          grep -q "BEGIN.*PRIVATE KEY" /home/runner/.oci/key.pem && echo "Key file contains valid header" || echo "Key file is invalid"
      
      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
      
      - name: 'Fix OCI Config File Permissions'
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/key.pem
      
      - name: 'Verify OCI CLI'
        run: |
          oci iam user get --user-id ${{secrets.OCI_USER_OCID}} --profile DEFAULT

      - name: 'Install Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        id: init
        run: terraform init
        
      - name: Terraform Validate
        id: validate
        run: terraform validate
  
      - name: Terraform Plan
        id: plan
        run: terraform plan
        continue-on-error: true
  
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve